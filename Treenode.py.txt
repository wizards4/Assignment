class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def __init__(self):
        self.maxSum = float('-inf')

    def maxPathSum(self, root: TreeNode) -> int:
        self.pathSum(root)
        return self.maxSum

    def pathSum(self, root: TreeNode) -> int:
        if not root:
            return 0
        leftSum = max(0, self.pathSum(root.left))
        rightSum = max(0, self.pathSum(root.right))
        self.maxSum = max(self.maxSum, leftSum + rightSum + root.val)
        return root.val + max(leftSum, rightSum)

def build_tree(values):
    if not values:
        return None
    root = TreeNode(values[0])
    queue = [root]
    i = 1
    while i < len(values):
        node = queue.pop(0)
        if values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root


root1 = build_tree([1, 2, 3])
print(Solution().maxPathSum(root1)) 


root2 = build_tree([-10, 9, 20, None, None, 15, 7])
print(Solution().maxPathSum(root2))  
